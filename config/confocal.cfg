#  Confocal setup Qudi configuration file. Can scan but also monitors power levels.
#
#
#
# IMPORTANT: The format of every 'module.Class' line has changed on 28.6.2015.
# =========  The class name now needs to be explicitly given here in the config.
#		  the config line must the form package.module.Class.ClassName
global:
    # list of modules to load when starting
    startup: ['man', 'tray']

    module_server:
        address: 'localhost'
        port: 12345

    ## For controlling the appearance of the GUI:
    stylesheet: 'qdark.qss'

hardware:

    piezo1:
        module.Class: 'Piezo.APTpiezo.APTPiezo'
        deviceID: '0'

    piezo2:
        module.Class: 'Piezo.APTpiezo.APTPiezo'
        is_second_piezo: True
        deviceID: '31808608'

    DAQ:
        module.Class: 'DAQ.DAQ'
        range: 'BIP10VOLTS'
        mode: 'single_ended'

    laser:
        module.Class: 'laser.ltune_laser.LtuneLaser'
        deviceID: '080983'
        # com_port: "COM5"

    flipper1:
        module.Class: 'flipper_mirror.flipper_mirror.FlipperMirror'
        deviceID: '37005466'

    flipper2:
        module.Class: 'flipper_mirror.flipper_mirror.FlipperMirror'
        deviceID: '37005411'

    camera:
        module.Class: 'camera.DCC1545MCamera.DCC1545M.DCC1545M'

    polarmotor:
        module.Class: 'motor.polarization_motor.PolarizationMotor'
        deviceID: '27262347'
        maxvelocity: 100

    powermeter:
        module.Class: 'powermeter.TLPMpowermeter.PowerMeter'
        address: 'USB0::0x1313::0x807B::16072030::INSTR'

    LAC:
        module.Class: 'motor.LAC_hardware.LACHardware'

    flipper1:
        module.Class: 'flipper_mirror.flipper_mirror.FlipperMirror'
        deviceID: '37005466'

    flipper2:
        module.Class: 'flipper_mirror.flipper_mirror.FlipperMirror'
        deviceID: '37005411'

    16Ch_Relay:
        module.Class: '16ChUSBRelay.USB_Relay'
        com_port: 'COM15'

    steppermotor1:
        module.Class: 'motor.stepper_motor.StepperMotor'
        motor_pin_1: 2
        motor_pin_2: 3
        motor_pin_3: 4
        motor_pin_4: 5

    steppermotor2:
        module.Class: 'motor.stepper_motor.StepperMotor'
        motor_pin_1: 8
        motor_pin_2: 9
        motor_pin_3: 10
        motor_pin_4: 11

logic:

    scannerlogic:
        module.Class: 'confocal_logic.ConfocalLogic'
        connect:
            confocalscanner1: 'scanner_tilt_interfuse'
            savelogic: 'savelogic'

    scanner_tilt_interfuse:
        module.Class: 'interfuse.scanner_tilt_interfuse.ScannerTiltInterfuse'
        connect:
            confocalscanner1: 'multscanner'

    optimizerlogic:
        module.Class: 'optimizer_logic.OptimizerLogic'
        connect:
            confocalscanner1: 'scanner_tilt_interfuse'
            fitlogic: 'fitlogic'

    fitlogic:
        module.Class: 'fit_logic.FitLogic'
        # additional_fit_methods_path: 'C:\\Custom_dir'  # optional, can also be lists on several folders

    laserscannerlogic:
        module.Class: 'laser_scanner_logic.LaserScannerLogic'
        connect:
            confocalscanner1: 'multscanner'
            savelogic: 'savelogic'

    multscanner:
        module.Class: 'multiple_device_confocal_logic.MultConfocalLogic'
        clock_frequency: 100
        connect:
            fitlogic: 'fitlogic'
            galvo: 'galvo'
            piezo: 'piezo2'
            counter: 'DAQ'
            mirrors: 'flipLogic'
    
    galvo:
        module.Class: 'galvo_logic.GalvoLogic'
        connect:
            daq: 'DAQ'
    
    tasklogic:
        module.Class: 'taskrunner.TaskRunner'
        tasks:
        #    dummytask:
        #        module: 'dummy'
        #        preposttasks: ['ppdummy']
        #    dummyinterruptor:
        #        module: 'dummy'
        #        pausetasks: ['dummytask']
        #        preposttasks: ['ppdummy2']
        #    ppdummy:
        #        module: 'prepostdummy'
        #    ppdummy2:
        #        module: 'prepostdummy'
            scannerLocationRefocus:
                module: 'refocus'
        #        preposttasks: ['fliplasermirror']
                pausetasks: ['scan', 'odmr']
                needsmodules:
                    optimizer: 'optimizerlogic'
        #        config:
        #            initial: [1, 1, 1]
        #    fliplasermirror:
        #        module: 'flipmirror'
        #        needsmodules:
        #            switchlogic: 'switch'
        #        config:
        #            sequence: [('mydummyswitch1', 1, True), ('mydummyswitch1', 2, True), ('mydummyswitch2', 1, True)]

    savelogic:
        module.Class: 'save_logic.SaveLogic'
        win_data_directory: 'C:/Data'   # DO NOT CHANGE THE DIRECTORY HERE! ONLY IN THE CUSTOM FILE!
        unix_data_directory: 'Data/'
        log_into_daily_directory: True
        save_pdf: True
        save_png: True
        
    laserlogic:
        module.Class: 'ltune_laser_logic.LtuneLaserLogic'
        connect:
            laser: 'laser'

    flipLogic:
        module.Class: 'flipper_mirror_logic.FlipperMirrorLogic'
        connect:
            flipper1: 'flipper1'
            flipper2: 'flipper2'


    camera_logic:
        module.Class: 'camera_logic.CameraLogic'
        connect:
            hardware: 'camera'
            savelogic: 'savelogic'
            fliplogic: 'flipLogic'

    polarmotorlogic:
        module.Class: 'polarization_motor_logic.PolarMotorLogic'
        connect:
            pmotor: 'polarmotor'

    powermeterLogic:
        module.Class: 'powermeter_logic.PowerMeterLogic'
        connect:
            powerMeter: 'powermeter'

    pidlogic:
        module.Class: 'modified_PID.ModPIDController'
        connect:
            process: 'powermeter'
            control: 'LAC'

    LAClogic:
        module.Class: 'LAC_logic.LACLogic'
        connect:
            LACmotor: 'LAC'

    aptLogic:
        module.Class: 'APTpiezo_logic.APTpiezoLogic'
        connect:
            apt_piezo_1: 'piezo1'
            apt_piezo_2: 'piezo2'
   
    daqcounter1:
        module.Class: 'daq_counter.DaqCounter'
        counter_channel: '0'
        connect:
            daq: 'DAQ'

    daqcounter2:
        module.Class: 'daq_counter.DaqCounter'
        counter_channel: '1'
        connect:
            daq: 'DAQ'

    poimanagerlogic:
        module.Class: 'poi_manager_logic.PoiManagerLogic'
        connect:
            scannerlogic: 'scannerlogic'
            optimiserlogic: 'optimizerlogic'
            savelogic: 'savelogic'

    flipLogic:
        module.Class: 'flipper_mirror_logic.FlipperMirrorLogic'
        connect:
            flipper1: 'flipper1'
            flipper2: 'flipper2'

    relaylogic:
        module.Class: 'relay_safety_logic.USB_RelaySafetyLogic'
        thresh: '10000'
        connect:
            relay: '16Ch_Relay'
            counter: 'daqcounter1'

    stepperlogic:
        module.Class: 'stepper_motor_logic.StepperMotorLogic'
        com_port: 'COM11'

        connect: 
            stepper_motor1: 'steppermotor1'
            stepper_motor2: 'steppermotor2'


gui:
    tray:
        module.Class: 'trayicon.TrayIcon'

    man:
        module.Class: 'manager.managergui.ManagerGui'

    confocal:
        module.Class: 'confocal.confocalgui.ConfocalGui'
        connect:
            confocallogic1: 'scannerlogic'
            savelogic: 'savelogic'
            optimizerlogic1: 'optimizerlogic'
        fixed_aspect_ratio_xy: True
        fixed_aspect_ratio_depth: True
        slider_stepsize: 0.001  # in micrometer
        image_x_padding: 0.02
        image_y_padding: 0.02
        image_z_padding: 0.02
        default_meter_prefix: 'u'

    poimanager:
        module.Class: 'poimanager.poimangui.PoiManagerGui'
        connect:
            poimanagerlogic: 'poimanagerlogic'
            scannerlogic: 'scannerlogic'

    flippergui:
        module.Class: 'flippermirror.flippermirror_gui.FlipperGUI'
        connect:
            flipperlogic: 'flipLogic'


    camera_gui:
        module.Class: 'camera.cameragui.CameraGUI'
        connect:
            camera_logic: 'camera_logic'
            savelogic: 'savelogic'


    polargui:
        module.Class: 'polarization_motor.polarization_motor_gui.PolarMotordGUI'
        connect: 
            polar_logic: 'polarmotorlogic'


    lasergui:
        module.Class: 'ltune_laser.ltunelasergui.LtuneLaserGUI'
        connect:
            ltune_laser_logic: 'laserlogic'


    piezogui:
        module.Class: 'Piezo.piezogui.PiezoGUI'
        connect: 
            apt_logic: 'aptLogic'


    galvogui:
        module.Class: 'galvo.galvogui.GalvoGUI'
        connect:
            galvo_logic: 'galvo'


    daqcount_gui:
        module.Class: 'daq_counter.daqcounter_gui.DAQCounterGUI'
        connect:
            daq_counter_1: 'daqcounter1'
            daq_counter_2: 'daqcounter2'


    pmgui:
        module.Class: 'powermeter.powermetergui.PowerMeterGUI'
        connect: 
            pmlogic: 'powermeterLogic'


    manual_LAC:
        module.Class: 'manualLAC.manualLAC.ManualLACGUI'
        connect:
            laclogic: 'LAClogic'
    
    LAC_PID: 
        module.Class: 'LAC_PID.LAC_PID_gui.LACPIDGUI'
        connect:
            pmlogic: 'powermeterLogic'
            pidlogic: 'pidlogic'
            laclogic: 'LAClogic'

    USB_relay:
        module.Class: 'USB_relay.USB_relay_gui.RelayGUI'
        connect:
            relaylogic: 'relaylogic'

    stepper_motor:
        module.Class: 'stepper_motor.stepper_motor_gui.StepperGUI'
        connect:
            stepper_logic: 'stepperlogic'